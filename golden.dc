# Read k & n
? sk
? sn
# Generate upper bound
ln lk ^ sb

# General for loop, w/ counter i & body x & postprocess p
[
    0sd
    [
        Si Sx Sp

        # Increment the depth
        ld1+sd
        [
            Li1-Si
            lpx
            li 0 <'
            lxx
            Li1+Si
        ]S'
        li 0 <'
        ld1-sd

        Lis_ Lxs_ Lps_ L's_
    ]sL
    lLx
]sL

# General while loop, w/ condition p & body < & postprocess >
[
    0sd
    [
        S? S> S<

        ld1+sd
        [
            l<x
            l?x 0 <'
            l>x
        ]S'
        l?x 0 <'
        ld1-sd

        L?s_ L>s_ L<s_ L's_
    ]sW
    lWx
]sW

# Initialize c for curr state to 0
0sc
# Updates curr state "c" from top of "a" stack, and marks it in history
[
    lc
    ln*
    lb%
    la+
    sc
]sU

# Mark position of curr state c as "1" in history
[
    1 lc:h
]sM

# Initialize stack length to "l"
lksl
# Calculate & grow stack "a" w/ new value
[
    0
    [
        la+
        Lar
    ]
    [
        rSa
    ]
    lk
    lLx

    ln%
    Sa
    ll1+sl
]sI

# Debug print stack "a"'s values
[
    # Traverse stack from bottom up
    [La]
    [
        Sa

        # Print separating space
        [[ ]P]Sx
        li 0 !=x
        Lxs_

        # Print next number
        lan
    ]
    ll
    lLx
    []ps_
]sD

# Get next history state
[
    [
        lc1+sc
        lHx
    ]st

    lc;h
    1
    =t
]sH

# State to stack "a"
[
    lksl
    lc

    [ln~Sb] [LbSa] lk lLx
]s2
l2x

# Find all groups
[
    # Save current state as "original"
    lcso
    # Continue until state loops back on itself
    [
        lMx
        lIx
        lUx
    ]dx # Run once before loop starts to emulate do ... while
    []
    [
        lolc-
        d*
    ]
    lWx

    # Truncate last element of stack "a"
    Las_
    ll1-sl

    # Debug print state
    lDx

    # Clear stack "a"
    [Las_]
    []
    ll1-
    lLx

    # Get next state
    lHx
    l2x

    # If we've haven't exhausted the state space, continue
] [] [lb lc -] lWx
